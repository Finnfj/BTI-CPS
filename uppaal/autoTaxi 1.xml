<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
clock g_clk;

const int a_no = 0;
const int b_no = 1;
const int c_no = 2;
const int d_no = 3;
const int e_no = 4;
const int low_station = 0;
const int high_station = 4;

typedef int[0,99999] clientID_t;
typedef int[low_station,high_station] stationID_t;
chan req[clientID_t];
chan ack[clientID_t];

const int uid_max = 99999;
int uid_c = 0;
int wait_st[5];
int want_st[5];

typedef struct {
int uid;
int start;
int target;
} person;

int randomNumber(int low, int high) {
    return fint(low + random(high-low));
}</declaration>
	<template>
		<name x="9" y="9">TaxiLocation</name>
		<declaration>// Place local declarations here.
const int max_pass = 7;
clock l_clk;
person passengers[max_pass];
int taken = 0;

void seat(person p) {
    int i;
    for (i=0; i&lt;max_pass; i++) {
        if (isNoPerson(passengers[i])) {
            passengers[i] = p;
            taken++;
        }
    }
}

void unseat(int station) {
    int i;
    for (i=0; i&lt;max_pass; i++) {
        if (passengers[i].target == station) {
            passengers[i] = noPerson();
            taken--;
        }
    }
}</declaration>
		<location id="id0" x="459" y="-51">
			<name x="449" y="-85">A</name>
		</location>
		<location id="id1" x="246" y="119">
			<name x="236" y="85">E</name>
		</location>
		<location id="id2" x="697" y="110">
			<name x="687" y="76">B</name>
		</location>
		<location id="id3" x="612" y="340">
			<name x="602" y="306">C</name>
		</location>
		<location id="id4" x="348" y="340">
			<name x="323" y="323">D</name>
		</location>
		<location id="id5" x="578" y="25">
			<name x="568" y="-9">AtoB</name>
		</location>
		<location id="id6" x="654" y="221">
			<name x="671" y="195">BtoC</name>
		</location>
		<location id="id7" x="484" y="340">
			<name x="459" y="306">CtoD</name>
		</location>
		<location id="id8" x="297" y="229">
			<name x="297" y="195">DtoE</name>
		</location>
		<location id="id9" x="357" y="25">
			<name x="347" y="-9">EtoA</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id9"/>
			<target ref="id0"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id9"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id1"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id8"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id4"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id7"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id6"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id2"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id5"/>
		</transition>
	</template>
	<template>
		<name>Passenger</name>
		<parameter>const int id, const int start, const int target</parameter>
		<location id="id10" x="-926" y="-170">
		</location>
		<location id="id11" x="-739" y="-170">
			<name x="-764" y="-204">connect</name>
		</location>
		<location id="id12" x="-535" y="-170">
			<name x="-543" y="-204">wait</name>
		</location>
		<location id="id13" x="-331" y="-170">
			<name x="-348" y="-204">riding</name>
		</location>
		<location id="id14" x="-153" y="-170">
			<name x="-163" y="-204">arrived</name>
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id13"/>
			<target ref="id14"/>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id11"/>
			<label kind="synchronisation" x="-901" y="-204">req[id]!</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id12"/>
		</transition>
	</template>
	<template>
		<name>Server</name>
		<declaration>int c;</declaration>
		<location id="id15" x="-102" y="-238">
		</location>
		<location id="id16" x="34" y="-238">
			<name x="8" y="-272">receive</name>
		</location>
		<location id="id17" x="170" y="-238">
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id17"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="select" x="-76" y="-289">i : clientID_t</label>
			<label kind="synchronisation" x="-76" y="-272">req[i]?</label>
			<label kind="assignment" x="-76" y="-229">c = i</label>
		</transition>
	</template>
	<template>
		<name>Serverthread</name>
		<parameter>const int station</parameter>
		<location id="id18" x="-34" y="34">
		</location>
		<location id="id19" x="-34" y="-68">
		</location>
		<init ref="id18"/>
		<transition>
			<source ref="id18"/>
			<target ref="id19"/>
			<label kind="synchronisation" x="-25" y="-25">ready!</label>
		</transition>
	</template>
	<template>
		<name>clockval</name>
		<location id="id20" x="0" y="0">
		</location>
		<location id="id21" x="0" y="-102">
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="guard" x="-169" y="-68">g_clk &gt; g_clk_v</label>
			<label kind="assignment" x="-161" y="-42">g_clk_v := g_clk_v + 1</label>
			<nail x="-187" y="-68"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id20"/>
			<label kind="guard" x="25" y="-110">g_clk &gt; g_clk_v</label>
			<label kind="assignment" x="25" y="-76">g_clk_v := g_clk_v + 1</label>
			<nail x="51" y="-51"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Process = Taxi();
globalclock = clockval();
system Process, globalclock;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
